@page "/"
@inject NavigationManager _navigationManager

@using Microsoft.AspNetCore.SignalR.Client
@using Tier1_Client.Models
@using System.Text.Json


<h1>Hello, world!</h1>

<div class="form-group">
    <label>
        User:
        <input @bind="username"/>
    </label>
</div>
<button class="btn btn-primary" @onclick="AddUser" disabled="@(!IsConnected)">Add User</button>

<p>@username</p>

@if (users is null)
{
    <p>Loading...</p>
}
else if (!users.Any())
{
    <p>No users in system...</p>
}
else
{
    <ul>
        @foreach (User user in users)
        {
            <li>@user.Username</li>
        }
    </ul>
}

@code{

    private HubConnection _hubConnection;

    public List<User> users { get; set; }
    public string username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("https://localhost:5001/userhub"))
            .Build();

        _hubConnection.On("UserListUpdated", async () =>
        {   
            Console.WriteLine("'UserListUpdated' triggered on client");
            await GetUsersAsync();
            await InvokeAsync(() => StateHasChanged());
        });

        await _hubConnection.StartAsync();
        
        await _hubConnection.SendAsync("AddToGroup");
        
        await GetUsersAsync();
    }

    public async Task AddUser() //TEST PRIVATE AND PUBLIC
    {
        await _hubConnection.SendAsync("AddNewUserAsync", username);
        await GetUsersAsync();
    }
    
    
    public async Task GetUsersAsync()
    {
        string respons = await _hubConnection.InvokeAsync<string>("GetUsersAsync");
        users = JsonSerializer.Deserialize<List<User>>(respons);
        Console.WriteLine("Updating user list...");
    }


    private bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}